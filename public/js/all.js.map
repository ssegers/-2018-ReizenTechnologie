{"version":3,"sources":["form.js","iban.js"],"names":[],"mappingstfile":"all.js","sourcesContent":["var currentTab = 0; // Current tab is set to be the first tab (0)\r\nshowTab(currentTab); // Display the current tab\r\nvar jsAlert =document.getElementById('jsAlert');\r\njsAlert.style.display= 'none';\r\nfunction showTab(n) {\r\n    // This function will display the specified tab of the form ...\r\n    var x = document.getElementsByClassName(\"tab\");\r\n    x[n].style.display = \"block\";\r\n    // ... and fix the Previous/Next buttons:\r\n    if (n == 0) {\r\n        document.getElementById(\"prevBtn\").style.display = \"none\";\r\n    } else {\r\n        document.getElementById(\"prevBtn\").style.display = \"inline\";\r\n    }\r\n    if (n == (x.length - 1)) {\r\n        document.getElementById(\"nextBtn\").innerHTML = \"Submit\";\r\n    } else {\r\n        document.getElementById(\"nextBtn\").innerHTML = \"Next\";\r\n    }\r\n    // ... and run a function that displays the correct step indicator:\r\n    fixStepIndicator(n)\r\n}\r\n\r\nfunction nextPrev(n) {\r\n    // This function will figure out which tab to display\r\n    var x = document.getElementsByClassName(\"tab\");\r\n    // Exit the function if any field in the current tab is invalid:\r\n    if (n == 1 && !validateForm()) return false;\r\n    // Hide the current tab:\r\n    x[currentTab].style.display = \"none\";\r\n    // Increase or decrease the current tab by 1:\r\n    currentTab = currentTab + n;\r\n    // if you have reached the end of the form... :\r\n    if (currentTab >= x.length) {\r\n        //...the form gets submitted:\r\n        document.getElementById(\"registerForm\").submit();\r\n        return false;\r\n    }\r\n    // Otherwise, display the correct tab:\r\n    showTab(currentTab);\r\n}\r\n\r\nfunction validateForm() {\r\n    // This function deals with validation of the form fields\r\n    var x, y, i, valid = true;\r\n    x = document.getElementsByClassName(\"tab\");\r\n    y = x[currentTab].getElementsByTagName(\"input\");\r\n\r\n    // A loop that checks every input field in the current tab:\r\n    for (i = 0; i < y.length; i++) {\r\n        // If a field is empty...\r\n\r\n            if (y[i].value == \"\") {\r\n                // add an \"invalid\" class to the field:\r\n                // and set the current valid status to false:\r\n                if(y[i].placeholder != \"Niet verplicht\"){\r\n\r\n                    y[i].className += \" invalid\";\r\n                    valid = false;\r\n                }\r\n            }\r\n            else{\r\n                y[i].className -= \" invalid\";\r\n            }\r\n\r\n            if(y[i].id == \"txtBank\"){\r\n\r\n                if(!IBAN.isValid(y[i].value)){\r\n                    y[i].className += \" invalid\";\r\n                    valid = false;\r\n                }\r\n            }\r\n\r\n            if(y[i].id == \"txtEmail\"){\r\n\r\n                if(!validateEmail(y[i].value)){\r\n\r\n                    y[i].className += \" invalid\";\r\n                    valid = false;\r\n                }\r\n            }\r\n\r\n    }\r\n    // If the valid status is true, mark the step as finished and valid:\r\n    if (valid) {\r\n        document.getElementsByClassName(\"step\")[currentTab].className += \" finish\";\r\n    }\r\n    return valid; // return the valid status\r\n}\r\nfunction validateEmail(email) {\r\n    var re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(String(email).toLowerCase());\r\n}\r\nfunction fixStepIndicator(n) {\r\n    // This function removes the \"active\" class of all steps...\r\n    var i, x = document.getElementsByClassName(\"step\");\r\n    for (i = 0; i < x.length; i++) {\r\n        x[i].className = x[i].className.replace(\" active\", \"\");\r\n    }\r\n    //... and adds the \"active\" class to the current step:\r\n    x[n].className += \" active\";\r\n}\r\n","(function (root, factory) {\r\n    if (typeof define === 'function' && define.amd) {\r\n        // AMD. Register as an anonymous module.\r\n        define(['exports'], factory);\r\n    } else if (typeof exports === 'object' && typeof exports.nodeName !== 'string') {\r\n        // CommonJS\r\n        factory(exports);\r\n    } else {\r\n        // Browser globals\r\n        factory(root.IBAN = {});\r\n    }\r\n}(this, function(exports){\r\n\r\n    // Array.prototype.map polyfill\r\n    // code from https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/map\r\n    if (!Array.prototype.map){\r\n        Array.prototype.map = function(fun /*, thisArg */){\r\n            \"use strict\";\r\n\r\n            if (this === void 0 || this === null)\r\n                throw new TypeError();\r\n\r\n            var t = Object(this);\r\n            var len = t.length >>> 0;\r\n            if (typeof fun !== \"function\")\r\n                throw new TypeError();\r\n\r\n            var res = new Array(len);\r\n            var thisArg = arguments.length >= 2 ? arguments[1] : void 0;\r\n            for (var i = 0; i < len; i++)\r\n            {\r\n                // NOTE: Absolute correctness would demand Object.defineProperty\r\n                //       be used.  But this method is fairly new, and failure is\r\n                //       possible only if Object.prototype or Array.prototype\r\n                //       has a property |i| (very unlikely), so use a less-correct\r\n                //       but more portable alternative.\r\n                if (i in t)\r\n                    res[i] = fun.call(thisArg, t[i], i, t);\r\n            }\r\n\r\n            return res;\r\n        };\r\n    }\r\n\r\n    var A = 'A'.charCodeAt(0),\r\n        Z = 'Z'.charCodeAt(0);\r\n\r\n    /**\r\n     * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\r\n     * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\r\n     *\r\n     * @param {string} iban the IBAN\r\n     * @returns {string} the prepared IBAN\r\n     */\r\n    function iso13616Prepare(iban) {\r\n        iban = iban.toUpperCase();\r\n        iban = iban.substr(4) + iban.substr(0,4);\r\n\r\n        return iban.split('').map(function(n){\r\n            var code = n.charCodeAt(0);\r\n            if (code >= A && code <= Z){\r\n                // A = 10, B = 11, ... Z = 35\r\n                return code - A + 10;\r\n            } else {\r\n                return n;\r\n            }\r\n        }).join('');\r\n    }\r\n\r\n    /**\r\n     * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\r\n     *\r\n     * @param iban\r\n     * @returns {number}\r\n     */\r\n    function iso7064Mod97_10(iban) {\r\n        var remainder = iban,\r\n            block;\r\n\r\n        while (remainder.length > 2){\r\n            block = remainder.slice(0, 9);\r\n            remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);\r\n        }\r\n\r\n        return parseInt(remainder, 10) % 97;\r\n    }\r\n\r\n    /**\r\n     * Parse the BBAN structure used to configure each IBAN Specification and returns a matching regular expression.\r\n     * A structure is composed of blocks of 3 characters (one letter and 2 digits). Each block represents\r\n     * a logical group in the typical representation of the BBAN. For each group, the letter indicates which characters\r\n     * are allowed in this group and the following 2-digits number tells the length of the group.\r\n     *\r\n     * @param {string} structure the structure to parse\r\n     * @returns {RegExp}\r\n     */\r\n    function parseStructure(structure){\r\n        // split in blocks of 3 chars\r\n        var regex = structure.match(/(.{3})/g).map(function(block){\r\n\r\n            // parse each structure block (1-char + 2-digits)\r\n            var format,\r\n                pattern = block.slice(0, 1),\r\n                repeats = parseInt(block.slice(1), 10);\r\n\r\n            switch (pattern){\r\n                case \"A\": format = \"0-9A-Za-z\"; break;\r\n                case \"B\": format = \"0-9A-Z\"; break;\r\n                case \"C\": format = \"A-Za-z\"; break;\r\n                case \"F\": format = \"0-9\"; break;\r\n                case \"L\": format = \"a-z\"; break;\r\n                case \"U\": format = \"A-Z\"; break;\r\n                case \"W\": format = \"0-9a-z\"; break;\r\n            }\r\n\r\n            return '([' + format + ']{' + repeats + '})';\r\n        });\r\n\r\n        return new RegExp('^' + regex.join('') + '$');\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param iban\r\n     * @returns {string}\r\n     */\r\n    function electronicFormat(iban){\r\n        return iban.replace(NON_ALPHANUM, '').toUpperCase();\r\n    }\r\n\r\n\r\n    /**\r\n     * Create a new Specification for a valid IBAN number.\r\n     *\r\n     * @param countryCode the code of the country\r\n     * @param length the length of the IBAN\r\n     * @param structure the structure of the underlying BBAN (for validation and formatting)\r\n     * @param example an example valid IBAN\r\n     * @constructor\r\n     */\r\n    function Specification(countryCode, length, structure, example){\r\n\r\n        this.countryCode = countryCode;\r\n        this.length = length;\r\n        this.structure = structure;\r\n        this.example = example;\r\n    }\r\n\r\n    /**\r\n     * Lazy-loaded regex (parse the structure and construct the regular expression the first time we need it for validation)\r\n     */\r\n    Specification.prototype._regex = function(){\r\n        return this._cachedRegex || (this._cachedRegex = parseStructure(this.structure))\r\n    };\r\n\r\n    /**\r\n     * Check if the passed iban is valid according to this specification.\r\n     *\r\n     * @param {String} iban the iban to validate\r\n     * @returns {boolean} true if valid, false otherwise\r\n     */\r\n    Specification.prototype.isValid = function(iban){\r\n        return this.length == iban.length\r\n            && this.countryCode === iban.slice(0,2)\r\n            && this._regex().test(iban.slice(4))\r\n            && iso7064Mod97_10(iso13616Prepare(iban)) == 1;\r\n    };\r\n\r\n    /**\r\n     * Convert the passed IBAN to a country-specific BBAN.\r\n     *\r\n     * @param iban the IBAN to convert\r\n     * @param separator the separator to use between BBAN blocks\r\n     * @returns {string} the BBAN\r\n     */\r\n    Specification.prototype.toBBAN = function(iban, separator) {\r\n        return this._regex().exec(iban.slice(4)).slice(1).join(separator);\r\n    };\r\n\r\n    /**\r\n     * Convert the passed BBAN to an IBAN for this country specification.\r\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\r\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\r\n     *\r\n     * @param bban the BBAN to convert to IBAN\r\n     * @returns {string} the IBAN\r\n     */\r\n    Specification.prototype.fromBBAN = function(bban) {\r\n        if (!this.isValidBBAN(bban)){\r\n            throw new Error('Invalid BBAN');\r\n        }\r\n\r\n        var remainder = iso7064Mod97_10(iso13616Prepare(this.countryCode + '00' + bban)),\r\n            checkDigit = ('0' + (98 - remainder)).slice(-2);\r\n\r\n        return this.countryCode + checkDigit + bban;\r\n    };\r\n\r\n    /**\r\n     * Check of the passed BBAN is valid.\r\n     * This function only checks the format of the BBAN (length and matching the letetr/number specs) but does not\r\n     * verify the check digit.\r\n     *\r\n     * @param bban the BBAN to validate\r\n     * @returns {boolean} true if the passed bban is a valid BBAN according to this specification, false otherwise\r\n     */\r\n    Specification.prototype.isValidBBAN = function(bban) {\r\n        return this.length - 4 == bban.length\r\n            && this._regex().test(bban);\r\n    };\r\n\r\n    var countries = {};\r\n\r\n    function addSpecification(IBAN){\r\n        countries[IBAN.countryCode] = IBAN;\r\n    }\r\n\r\n    addSpecification(new Specification(\"AD\", 24, \"F04F04A12\",          \"AD1200012030200359100100\"));\r\n    addSpecification(new Specification(\"AE\", 23, \"F03F16\",             \"AE070331234567890123456\"));\r\n    addSpecification(new Specification(\"AL\", 28, \"F08A16\",             \"AL47212110090000000235698741\"));\r\n    addSpecification(new Specification(\"AT\", 20, \"F05F11\",             \"AT611904300234573201\"));\r\n    addSpecification(new Specification(\"AZ\", 28, \"U04A20\",             \"AZ21NABZ00000000137010001944\"));\r\n    addSpecification(new Specification(\"BA\", 20, \"F03F03F08F02\",       \"BA391290079401028494\"));\r\n    addSpecification(new Specification(\"BE\", 16, \"F03F07F02\",          \"BE68539007547034\"));\r\n    addSpecification(new Specification(\"BG\", 22, \"U04F04F02A08\",       \"BG80BNBG96611020345678\"));\r\n    addSpecification(new Specification(\"BH\", 22, \"U04A14\",             \"BH67BMAG00001299123456\"));\r\n    addSpecification(new Specification(\"BR\", 29, \"F08F05F10U01A01\",    \"BR9700360305000010009795493P1\"));\r\n    addSpecification(new Specification(\"BY\", 28, \"A04F04A16\",          \"BY13NBRB3600900000002Z00AB00\"));\r\n    addSpecification(new Specification(\"CH\", 21, \"F05A12\",             \"CH9300762011623852957\"));\r\n    addSpecification(new Specification(\"CR\", 22, \"F04F14\",             \"CR72012300000171549015\"));\r\n    addSpecification(new Specification(\"CY\", 28, \"F03F05A16\",          \"CY17002001280000001200527600\"));\r\n    addSpecification(new Specification(\"CZ\", 24, \"F04F06F10\",          \"CZ6508000000192000145399\"));\r\n    addSpecification(new Specification(\"DE\", 22, \"F08F10\",             \"DE89370400440532013000\"));\r\n    addSpecification(new Specification(\"DK\", 18, \"F04F09F01\",          \"DK5000400440116243\"));\r\n    addSpecification(new Specification(\"DO\", 28, \"U04F20\",             \"DO28BAGR00000001212453611324\"));\r\n    addSpecification(new Specification(\"EE\", 20, \"F02F02F11F01\",       \"EE382200221020145685\"));\r\n    addSpecification(new Specification(\"ES\", 24, \"F04F04F01F01F10\",    \"ES9121000418450200051332\"));\r\n    addSpecification(new Specification(\"FI\", 18, \"F06F07F01\",          \"FI2112345600000785\"));\r\n    addSpecification(new Specification(\"FO\", 18, \"F04F09F01\",          \"FO6264600001631634\"));\r\n    addSpecification(new Specification(\"FR\", 27, \"F05F05A11F02\",       \"FR1420041010050500013M02606\"));\r\n    addSpecification(new Specification(\"GB\", 22, \"U04F06F08\",          \"GB29NWBK60161331926819\"));\r\n    addSpecification(new Specification(\"GE\", 22, \"U02F16\",             \"GE29NB0000000101904917\"));\r\n    addSpecification(new Specification(\"GI\", 23, \"U04A15\",             \"GI75NWBK000000007099453\"));\r\n    addSpecification(new Specification(\"GL\", 18, \"F04F09F01\",          \"GL8964710001000206\"));\r\n    addSpecification(new Specification(\"GR\", 27, \"F03F04A16\",          \"GR1601101250000000012300695\"));\r\n    addSpecification(new Specification(\"GT\", 28, \"A04A20\",             \"GT82TRAJ01020000001210029690\"));\r\n    addSpecification(new Specification(\"HR\", 21, \"F07F10\",             \"HR1210010051863000160\"));\r\n    addSpecification(new Specification(\"HU\", 28, \"F03F04F01F15F01\",    \"HU42117730161111101800000000\"));\r\n    addSpecification(new Specification(\"IE\", 22, \"U04F06F08\",          \"IE29AIBK93115212345678\"));\r\n    addSpecification(new Specification(\"IL\", 23, \"F03F03F13\",          \"IL620108000000099999999\"));\r\n    addSpecification(new Specification(\"IS\", 26, \"F04F02F06F10\",       \"IS140159260076545510730339\"));\r\n    addSpecification(new Specification(\"IT\", 27, \"U01F05F05A12\",       \"IT60X0542811101000000123456\"));\r\n    addSpecification(new Specification(\"IQ\", 23, \"U04F03A12\",          \"IQ98NBIQ850123456789012\"));\r\n    addSpecification(new Specification(\"JO\", 30, \"A04F22\",             \"JO15AAAA1234567890123456789012\"));\r\n    addSpecification(new Specification(\"KW\", 30, \"U04A22\",             \"KW81CBKU0000000000001234560101\"));\r\n    addSpecification(new Specification(\"KZ\", 20, \"F03A13\",             \"KZ86125KZT5004100100\"));\r\n    addSpecification(new Specification(\"LB\", 28, \"F04A20\",             \"LB62099900000001001901229114\"));\r\n    addSpecification(new Specification(\"LC\", 32, \"U04F24\",             \"LC07HEMM000100010012001200013015\"));\r\n    addSpecification(new Specification(\"LI\", 21, \"F05A12\",             \"LI21088100002324013AA\"));\r\n    addSpecification(new Specification(\"LT\", 20, \"F05F11\",             \"LT121000011101001000\"));\r\n    addSpecification(new Specification(\"LU\", 20, \"F03A13\",             \"LU280019400644750000\"));\r\n    addSpecification(new Specification(\"LV\", 21, \"U04A13\",             \"LV80BANK0000435195001\"));\r\n    addSpecification(new Specification(\"MC\", 27, \"F05F05A11F02\",       \"MC5811222000010123456789030\"));\r\n    addSpecification(new Specification(\"MD\", 24, \"U02A18\",             \"MD24AG000225100013104168\"));\r\n    addSpecification(new Specification(\"ME\", 22, \"F03F13F02\",          \"ME25505000012345678951\"));\r\n    addSpecification(new Specification(\"MK\", 19, \"F03A10F02\",          \"MK07250120000058984\"));\r\n    addSpecification(new Specification(\"MR\", 27, \"F05F05F11F02\",       \"MR1300020001010000123456753\"));\r\n    addSpecification(new Specification(\"MT\", 31, \"U04F05A18\",          \"MT84MALT011000012345MTLCAST001S\"));\r\n    addSpecification(new Specification(\"MU\", 30, \"U04F02F02F12F03U03\", \"MU17BOMM0101101030300200000MUR\"));\r\n    addSpecification(new Specification(\"NL\", 18, \"U04F10\",             \"NL91ABNA0417164300\"));\r\n    addSpecification(new Specification(\"NO\", 15, \"F04F06F01\",          \"NO9386011117947\"));\r\n    addSpecification(new Specification(\"PK\", 24, \"U04A16\",             \"PK36SCBL0000001123456702\"));\r\n    addSpecification(new Specification(\"PL\", 28, \"F08F16\",             \"PL61109010140000071219812874\"));\r\n    addSpecification(new Specification(\"PS\", 29, \"U04A21\",             \"PS92PALS000000000400123456702\"));\r\n    addSpecification(new Specification(\"PT\", 25, \"F04F04F11F02\",       \"PT50000201231234567890154\"));\r\n    addSpecification(new Specification(\"QA\", 29, \"U04A21\",             \"QA30AAAA123456789012345678901\"));\r\n    addSpecification(new Specification(\"RO\", 24, \"U04A16\",             \"RO49AAAA1B31007593840000\"));\r\n    addSpecification(new Specification(\"RS\", 22, \"F03F13F02\",          \"RS35260005601001611379\"));\r\n    addSpecification(new Specification(\"SA\", 24, \"F02A18\",             \"SA0380000000608010167519\"));\r\n    addSpecification(new Specification(\"SC\", 31, \"U04F04F16U03\",       \"SC18SSCB11010000000000001497USD\"));\r\n    addSpecification(new Specification(\"SE\", 24, \"F03F16F01\",          \"SE4550000000058398257466\"));\r\n    addSpecification(new Specification(\"SI\", 19, \"F05F08F02\",          \"SI56263300012039086\"));\r\n    addSpecification(new Specification(\"SK\", 24, \"F04F06F10\",          \"SK3112000000198742637541\"));\r\n    addSpecification(new Specification(\"SM\", 27, \"U01F05F05A12\",       \"SM86U0322509800000000270100\"));\r\n    addSpecification(new Specification(\"ST\", 25, \"F08F11F02\",          \"ST68000100010051845310112\"));\r\n    addSpecification(new Specification(\"SV\", 28, \"U04F20\",             \"SV62CENR00000000000000700025\"));\r\n    addSpecification(new Specification(\"TL\", 23, \"F03F14F02\",          \"TL380080012345678910157\"));\r\n    addSpecification(new Specification(\"TN\", 24, \"F02F03F13F02\",       \"TN5910006035183598478831\"));\r\n    addSpecification(new Specification(\"TR\", 26, \"F05F01A16\",          \"TR330006100519786457841326\"));\r\n    addSpecification(new Specification(\"UA\", 29, \"F25\",                \"UA511234567890123456789012345\"));\r\n    addSpecification(new Specification(\"VG\", 24, \"U04F16\",             \"VG96VPVG0000012345678901\"));\r\n    addSpecification(new Specification(\"XK\", 20, \"F04F10F02\",          \"XK051212012345678906\"));\r\n\r\n\r\n    // The following countries are not included in the official IBAN registry but use the IBAN specification\r\n\r\n    // Angola\r\n    addSpecification(new Specification(\"AO\", 25, \"F21\",                \"AO69123456789012345678901\"));\r\n    // Burkina\r\n    addSpecification(new Specification(\"BF\", 27, \"F23\",                \"BF2312345678901234567890123\"));\r\n    // Burundi\r\n    addSpecification(new Specification(\"BI\", 16, \"F12\",                \"BI41123456789012\"));\r\n    // Benin\r\n    addSpecification(new Specification(\"BJ\", 28, \"F24\",                \"BJ39123456789012345678901234\"));\r\n    // Ivory\r\n    addSpecification(new Specification(\"CI\", 28, \"U02F22\",             \"CI70CI1234567890123456789012\"));\r\n    // Cameron\r\n    addSpecification(new Specification(\"CM\", 27, \"F23\",                \"CM9012345678901234567890123\"));\r\n    // Cape Verde\r\n    addSpecification(new Specification(\"CV\", 25, \"F21\",                \"CV30123456789012345678901\"));\r\n    // Algeria\r\n    addSpecification(new Specification(\"DZ\", 24, \"F20\",                \"DZ8612345678901234567890\"));\r\n    // Iran\r\n    addSpecification(new Specification(\"IR\", 26, \"F22\",                \"IR861234568790123456789012\"));\r\n    // Madagascar\r\n    addSpecification(new Specification(\"MG\", 27, \"F23\",                \"MG1812345678901234567890123\"));\r\n    // Mali\r\n    addSpecification(new Specification(\"ML\", 28, \"U01F23\",             \"ML15A12345678901234567890123\"));\r\n    // Mozambique\r\n    addSpecification(new Specification(\"MZ\", 25, \"F21\",                \"MZ25123456789012345678901\"));\r\n    // Senegal\r\n    addSpecification(new Specification(\"SN\", 28, \"U01F23\",             \"SN52A12345678901234567890123\"));\r\n\r\n    var NON_ALPHANUM = /[^a-zA-Z0-9]/g,\r\n        EVERY_FOUR_CHARS =/(.{4})(?!$)/g;\r\n\r\n    /**\r\n     * Utility function to check if a variable is a String.\r\n     *\r\n     * @param v\r\n     * @returns {boolean} true if the passed variable is a String, false otherwise.\r\n     */\r\n    function isString(v){\r\n        return (typeof v == 'string' || v instanceof String);\r\n    }\r\n\r\n    /**\r\n     * Check if an IBAN is valid.\r\n     *\r\n     * @param {String} iban the IBAN to validate.\r\n     * @returns {boolean} true if the passed IBAN is valid, false otherwise\r\n     */\r\n    exports.isValid = function(iban){\r\n        if (!isString(iban)){\r\n            return false;\r\n        }\r\n        iban = electronicFormat(iban);\r\n        var countryStructure = countries[iban.slice(0,2)];\r\n        return !!countryStructure && countryStructure.isValid(iban);\r\n    };\r\n\r\n    /**\r\n     * Convert an IBAN to a BBAN.\r\n     *\r\n     * @param iban\r\n     * @param {String} [separator] the separator to use between the blocks of the BBAN, defaults to ' '\r\n     * @returns {string|*}\r\n     */\r\n    exports.toBBAN = function(iban, separator){\r\n        if (typeof separator == 'undefined'){\r\n            separator = ' ';\r\n        }\r\n        iban = electronicFormat(iban);\r\n        var countryStructure = countries[iban.slice(0,2)];\r\n        if (!countryStructure) {\r\n            throw new Error('No country with code ' + iban.slice(0,2));\r\n        }\r\n        return countryStructure.toBBAN(iban, separator);\r\n    };\r\n\r\n    /**\r\n     * Convert the passed BBAN to an IBAN for this country specification.\r\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\r\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\r\n     *\r\n     * @param countryCode the country of the BBAN\r\n     * @param bban the BBAN to convert to IBAN\r\n     * @returns {string} the IBAN\r\n     */\r\n    exports.fromBBAN = function(countryCode, bban){\r\n        var countryStructure = countries[countryCode];\r\n        if (!countryStructure) {\r\n            throw new Error('No country with code ' + countryCode);\r\n        }\r\n        return countryStructure.fromBBAN(electronicFormat(bban));\r\n    };\r\n\r\n    /**\r\n     * Check the validity of the passed BBAN.\r\n     *\r\n     * @param countryCode the country of the BBAN\r\n     * @param bban the BBAN to check the validity of\r\n     */\r\n    exports.isValidBBAN = function(countryCode, bban){\r\n        if (!isString(bban)){\r\n            return false;\r\n        }\r\n        var countryStructure = countries[countryCode];\r\n        return countryStructure && countryStructure.isValidBBAN(electronicFormat(bban));\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param iban\r\n     * @param separator\r\n     * @returns {string}\r\n     */\r\n    exports.printFormat = function(iban, separator){\r\n        if (typeof separator == 'undefined'){\r\n            separator = ' ';\r\n        }\r\n        return electronicFormat(iban).replace(EVERY_FOUR_CHARS, \"$1\" + separator);\r\n    };\r\n\r\n    exports.electronicFormat = electronicFormat;\r\n    /**\r\n     * An object containing all the known IBAN specifications.\r\n     */\r\n    exports.countries = countries;\r\n\r\n}));\r\n"]}